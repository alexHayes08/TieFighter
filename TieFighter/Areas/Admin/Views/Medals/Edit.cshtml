@using TieFighter.Areas.Admin.Models.MedalsViewModels
@model TieFighter.Models.Medal

@{
    ViewData["Title"] = "Edit";
    var names = Enum.GetNames(typeof(MedalConditionTypes));
    var operatorNames = Enum.GetNames(typeof(MedalConditionalTypeStatsOperators));
    var statNames = Enum.GetNames(typeof(MedalConditionalTypeStatsOperators));
}

<div class="topVSpacer"></div>
<div class="row">
    <div class="col-lg-2"></div>
    <div class="col-lg-8">
        <div class="d-flex align-items-center">
            <h2 class="flex-grow">Edit</h2>
            <input type="button" id="updateEntity" value="Update" class="btn btn-primary align-middle mx-2" />
            <a asp-action="Index">Back to List</a>
        </div>
        <h4>Medal - <span id="medalId">@Model.Id</span></h4>
        <hr />
        <div class="row">
            <div class="col-md-6">
                <form id="medalForm" asp-action="Edit" class="d-block position-relative" enctype="multipart/form-data" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="MedalName" class="control-label"></label>
                        <input asp-for="MedalName" class="form-control" type="text" required/>
                        <span asp-validation-for="MedalName" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Description" class="control-label"></label>
                        <textarea asp-for="Description" class="form-control" required></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="PointsWorth" class="control-label"></label>
                        <input asp-for="PointsWorth" class="form-control" type="number" required/>
                        <span asp-validation-for="PointsWorth" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label for="FileLocation" class="control-label">File Location</label>
                        <input for="FileLocation" class="form-control" name="FileLocation" type="file" accept=".png"/>
                        <div id="newImagePreviewContainer" class="d-none">
                            <div class="row m-2">
                                <div class="col-md-6 text-center">
                                    <div class="d-flex flex-column justify-content-center align-items-center h-100">
                                        <h3>New Image</h3>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="d-flex flex-column justify-content-center align-items-center h-100">
                                        <img id="newImagePreview" class="z-depth-1 z-depth-3-hover" src="" alt="No image selected..." />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="col-md-6">
                <div class="d-inline">
                    <h2 class="text-center">Current Image</h2>
                    <img id="currentImage" class="img-fluid mx-auto d-block z-depth-2" src="~/resources/Medals/@Html.Raw(Model.Id + ".png")" alt="Image not set..." />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="form-group">
                    <table id="conditionsTable" class="table">
                        <thead>
                            <tr>
                                <th colspan="3"></th>
                                <th>
                                    <button id="deleteSelectedConditions" class="d-block mx-auto btn btn-danger" type="button">Delete Selected Conditions</button>
                                    @*<button id="addNewCondition" class="d-block mx-auto btn btn-default" type="button">Add Condition</button>*@
                                </th>
                            </tr>
                            <tr>
                                <th>
                                    <label>
                                        <input id="toggleAllConditions" type="checkbox" />
                                    </label>
                                </th>
                                <th>Type</th>
                                <th>Value</th>
                                <th>Depends On</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; Model.Conditions != null && i < Model.Conditions.Length; i++)
                            {
                                var condition = Model.Conditions[i];
                                <tr>
                                    <td>
                                        <input type="checkbox" />
                                    </td>
                                    <td>
                                        <select class="custom-select">
                                            @{
                                                foreach (var name in names)
                                                {
                                                    if (name == Enum.GetName(typeof(MedalConditionTypes), condition))
                                                    {
                                                        <option value="@name" selected>@name</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@name">@name</option>
                                                    }
                                                }
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        @switch (condition.ConditionType)
                                        {
                                            case MedalConditionTypes.KillCount:
                                                <input name="@i-conditionValue" type="number" value="@((int)condition.ConditionValue)" />
                                                break;
                                            case MedalConditionTypes.StatAt:
                                                var stat = (MedalConditionalTypeStats)condition.ConditionValue;
                                                <input name="@i-conditionValue-Name" type="number" value="@stat.Name" />
                                                    <input name="@i-conditionValue-Value" type="number" value="@stat.Value" />
                                                    <input name="@i-conditionValue-ValueAsPercent" type="checkbox" value="@stat.ValueAsPercent" />
                                                    <select name="@i-conditionValue-Operator">
                                                        @foreach (var oper in operatorNames)
                                                        {
                                                            if (Enum.GetName(typeof(MedalConditionalTypeStatsOperators), stat.Operator) == oper)
                                                            {
                                                                <option value="@oper" selected>@oper</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="@oper">@oper</option>
                                                            }
                                                        }
                                                    </select>
                                                break;
                                            case MedalConditionTypes.TimeSpan:
                                                <input name="@i-conditionValue" type="datetime" value="@((DateTime)condition.ConditionValue)" />
                                                break;
                                            case MedalConditionTypes.TotalTravelDistance:
                                                <input name="@i-conditionValue" type="number" value="@((double)condition.ConditionValue)" />
                                                break;
                                            case MedalConditionTypes.WithoutDying:
                                                <input name="@i-conditionValue" type="checkbox" readonly checked />
                                                break;
                                            default:
                                                <input name="@i-conditionValue" type="text" value="@condition.ConditionValue.ToString()" />
                                                break;
                                        }
                                    </td>
                                    <td>
                                        @{
                                            if (condition.DependsOn != null)
                                            {

                                            }
                                            else
                                            {
                                                <button class="btn btn-default">Add dependency</button>
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td>
                                    <button id="addNewCondition" class="d-block mx-auto btn btn-default" type="button">Add Condition</button>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<template id="conditionalRowTemplate">
    <tr>
        <td>
            <input type="checkbox" />
        </td>
        <td class="conditionType">
            <select class="custom-select">
                @{
                    foreach (var name in names)
                    {
                        <option value="@name">@name</option>
                    }
                }
            </select>
        </td>
        <td class="conditionValue">
            <input type="text" class="form-control"/>
        </td>
        <td class="conditionDependsOn">
            <button class="btn btn-default">Depends On</button>
        </td>
    </tr>
</template>
<template id="conditionalStatType">
    <label>
        Stat name:
        <input class="statName form-control" type="text" required />
    </label>
    <label>
        Stat value:
        <input class="statValue form-control" type="number" required value="0" />
    </label>
    <select class="statOperator custom-select">
        @foreach (var statTypeOperator in statNames)
        {
            <option name="@statTypeOperator">@statTypeOperator</option>
        }
    </select>
    <label>
        Treat value as percent: 
        <input class="statValueAsPercent form-control" type="checkbox" />
    </label>
</template>

@section Scripts {
    <script src="~/js/admin-medals-edit.js"></script>
}